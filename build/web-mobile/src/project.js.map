{"version":3,"sources":["assets/Script/Bottle.ts","assets/Script/Flask.ts","assets/Script/Quiz.ts","assets/Script/Torch.ts"],"names":["_a","cc","_decorator","ccclass","property","Bottle","_super","_this","apply","this","arguments","innerStaff","__extends","Object","defineProperty","prototype","get","node","color","set","value","__decorate","type","Color","Sprite","Component","exports","default","Flask","animation","changeColor","from","to","speed","animationClip","getClips","removeClip","curveData","props","frame","state","addClip","getR","getG","getB","play","name","onAnimCompleted","log","start","getComponent","Animation","Bottle_1","require","Flask_1","Torch_1","Quiz","toggleContainer","irka","bottlePrefab","flaskPrefab","torchPrefab","toggleItems","forEach","e","on","Node","EventType","TOUCH_START","flaskCmp","addFlask","torch","addTorch","torchCmp","isActive","r","Math","round","random","g","b","newColor","staffColor","changeLiquidColor","x","y","instantiate","addChild","setPosition","addBottle","ToggleContainer","Prefab","Torch","offSpriteFrame","torchSpriteNode","torchSprite","torchAnimation","toggle","off","stop","spriteFrame","SpriteFrame"],"mappings":"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","sourcesContent":["const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Bottle extends cc.Component {\n    @property({ type: cc.Color })\n    get staffColor(): cc.Color {\n        if (this.innerStaff && this.innerStaff.node) {\n            return this.innerStaff.node.color;\n        }\n        return null;\n    }\n\n    set staffColor(value: cc.Color) {\n        if (this.innerStaff && this.innerStaff && this.innerStaff.node) {\n            this.innerStaff.node.color = value;\n        }\n    }\n\n    @property(cc.Sprite)\n    innerStaff: cc.Sprite = null;\n}\n","const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Flask extends cc.Component {\n    @property({ type: cc.Color })\n    get staffColor(): cc.Color {\n        if (this.innerStaff && this.innerStaff.node) {\n            return this.innerStaff.node.color;\n        }\n        return null;\n    }\n\n    set staffColor(value: cc.Color) {\n        if (this.innerStaff && this.innerStaff && this.innerStaff.node) {\n            this.innerStaff.node.color = value;\n        }\n    }\n\n    @property(cc.Sprite)\n    innerStaff: cc.Sprite = null;\n\n    animation: cc.Animation = null;\n    animationClip: cc.AnimationClip;\n\n    changeColor(from: cc.Color, to: cc.Color, speed: number = 1) {\n        // this.innerStaff.node.color = to;\n        const animationClip = this.animation.getClips()[0];\n        this.animation.removeClip(animationClip);\n\n        animationClip.curveData = {\n            props: {\n                color: [\n                    { frame: 0, value: this.innerStaff.node.color },\n                    { frame: 0.5, value: to },\n                ],\n            },\n        };\n\n        animationClip.speed = speed;\n\n        const state = this.animation.addClip(animationClip, `${from.getR()}-${from.getG()}-${from.getB()}`);\n\n        this.animation.play(state.name);\n        this.animationClip = animationClip;\n\n        // cc.log(this.animation);\n        // cc.log(state);\n    }\n\n    onAnimCompleted() {\n        cc.log('COMPLETE!!');\n    }\n\n    start() {\n        this.animation = this.innerStaff.getComponent(cc.Animation);\n        this.animationClip = this.animation.getClips()[0];\n    }\n}\n","import Bottle from './Bottle';\nimport Flask from './Flask';\nimport Torch from './Torch';\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Quiz extends cc.Component {\n    @property({ type: cc.ToggleContainer })\n    toggleContainer: cc.ToggleContainer = null;\n\n    @property({ type: cc.Node })\n    irka: cc.Node = null;\n\n    @property({ type: cc.Prefab })\n    bottlePrefab: cc.Prefab = null;\n\n    @property({ type: cc.Prefab })\n    flaskPrefab: cc.Prefab = null;\n\n    @property({ type: cc.Prefab })\n    torchPrefab: cc.Prefab = null;\n\n    // @property(cc.Label)\n    // label: cc.Label = null;\n\n    start() {\n        this.toggleContainer.toggleItems.forEach(e => {\n            e.node.on(cc.Node.EventType.TOUCH_START, () => this.irka.getComponent(cc.Animation).play(e.node.name));\n        });\n\n        const flask1 = this.addFlask(-150, -150, new cc.Color(128, 255, 0));\n        const flaskCmp = flask1.getComponent(Flask);\n\n        const torch = this.addTorch();\n        const torchCmp = torch.getComponent(Torch);\n\n        const changeLiquidColor = () => {\n            if (!torchCmp.isActive) {\n                const r = Math.round(Math.random() * 255);\n                const g = Math.round(Math.random() * 255);\n                const b = Math.round(Math.random() * 255);\n\n                const newColor = new cc.Color(r, g, b);\n\n                flaskCmp.changeColor(flaskCmp.staffColor, newColor, 1);\n            }\n        }\n\n        torch.on(cc.Node.EventType.TOUCH_START, () => changeLiquidColor());\n    }\n\n    addFlask(x: number, y: number, color?: cc.Color): cc.Node {\n        if (!color) {\n            color = new cc.Color(255, 255, 255);\n        }\n        const node = cc.instantiate(this.flaskPrefab);\n        this.node.addChild(node);\n        node.setPosition(x, y);\n\n        node.getComponent(Flask).staffColor = color;\n\n        return node;\n    }\n\n    addBottle(x: number, y: number, color?: cc.Color): cc.Node {\n        if (!color) {\n            color = new cc.Color(255, 255, 255);\n        }\n        const node = cc.instantiate(this.bottlePrefab);\n        this.node.addChild(node);\n        node.setPosition(x, y);\n\n        node.getComponent(Bottle).staffColor = color;\n\n        return node;\n    }\n\n    addTorch(x: number = -152, y: number = -211): cc.Node {\n        const node = cc.instantiate(this.torchPrefab);\n        this.node.addChild(node);\n        node.setPosition(x, y);\n        return node;\n    }\n}\n","const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Torch extends cc.Component {\n\n    isActive: boolean;\n\n    @property(cc.SpriteFrame)\n    offSpriteFrame: cc.SpriteFrame = null;\n\n    @property(cc.Node)\n    torchSpriteNode: cc.Node = null;\n\n    torchAnimation: cc.Animation;\n    torchSprite: cc.Sprite;\n\n    start() {\n        this.torchSprite = this.torchSpriteNode.getComponent(cc.Sprite);\n        this.torchAnimation = this.torchSpriteNode.getComponent(cc.Animation);\n        this.node.on(cc.Node.EventType.TOUCH_START, () => this.toggle());\n    }\n\n    toggle() {\n        if (this.isActive) {\n            this.off();\n        } else {\n            this.on();\n        }\n    }\n\n    on() {\n        this.isActive = true;\n        this.torchAnimation.play();\n    }\n\n    off() {\n        this.isActive = false;\n        this.torchAnimation.stop();\n        this.torchSprite.spriteFrame = this.offSpriteFrame;\n    }\n}\n"],"sourceRoot":"/source/","file":"project.js"}